---
- name: Tab Five
  hosts: your_target_hosts
  gather_facts: yes
  become: yes

  tasks:

    - name: 5.1.1 Ensure cron daemon is enabled and running
      service:
        name: cron
        enabled: yes
        state: started

    - name: 5.1.2 Ensure permissions on /etc/crontab are configured
      file:
        path: /etc/crontab
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.3 Ensure permissions on /etc/cron.hourly are configured
      file:
        path: /etc/cron.hourly
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.4 Ensure permissions on /etc/cron.daily are configured
      file:
        path: /etc/cron.daily
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.5 Ensure permissions on /etc/cron.weekly are configured
      file:
        path: /etc/cron.weekly
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.6 Ensure permissions on /etc/cron.monthly are configured
      file:
        path: /etc/cron.monthly
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.7 Ensure permissions on /etc/cron.d are configured
      file:
        path: /etc/cron.d
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.8 Ensure cron is restricted to authorized users | Gather package facts for "cronie"
      package_facts:
        manager: auto
      block:
        - name: 5.1.8 Ensure cron is restricted to authorized users | When cronie is installed | remove /etc/cron.deny
          file:
            path: /etc/cron.deny
            state: absent
          ignore_errors: yes
        - name: 5.1.8 Ensure cron is restricted to authorized users | When cronie is installed | stats of /etc/cron.allow 
          stat:
            path: /etc/cron.allow
          register: cfile
        - name: 5.1.8 Ensure cron is restricted to authorized users | create , change ownership and mode of /etc/cron.allow
          file:
            path: /etc/cron.allow
            state: "{{ 'file' if cfile.stat.exists else 'touch' }}"
            owner: root
            group: root
            mode: "u-x,go-rwx"
      when: "'cronie' in ansible_facts['packages']"
    - name: 5.1.8 Ensure cron is restricted to authorized users | Display message when "cronie" is not installed
      debug:
        msg: "cron is not installed on the system"
      when: "'cronie' not in ansible_facts['packages']"
      
    - name: 5.1.9 Ensure at is restricted to authorized users | Gather package facts for "at"
      package_facts:
        manager: auto
      block:
        - name: 5.1.9 Ensure at is restricted to authorized users | When at is installed | remove /etc/at.deny
          file:
            path: /etc/at.deny
            state: absent
          ignore_errors: yes
        - name: 5.1.9 Ensure at is restricted to authorized users | When at is installed | stats of /etc/at.allow 
          stat:
            path: /etc/at.allow
          register: afile
        - name: 5.1.9 Ensure at is restricted to authorized users | create , change ownership and mode of /etc/at.allow
          file:
            path: /etc/at.allow
            state: "{{ 'file' if afile.stat.exists else 'touch' }}"
            owner: root
            group: root
            mode: "u-x,go-rwx"
      when: "'at' in ansible_facts['packages']"
    - name: 5.1.9 Ensure at is restricted to authorized users | Display message when "at" is not installed
      debug:
        msg: "at is not installed on the system"
      when: "'at' not in ansible_facts['packages']" 

    - name: 5.2.1 Ensure permissions on /etc/ssh/sshd_config are configured
      file:
        path: /etc/ssh/sshd_config
        state: file
        owner: root
        group: root
        mode: og-rwx

        
    - name: 5.2.2 Ensure permissions on SSH private host key files are configured
      block:
        - name: 5.2.2 Ensure permissions on SSH private host key files are configured | find keys
          shell: |
            find /etc/ssh -xdev -type f -name 'ssh_host_*_key'
          register: private_keys

        #- name: print registered variable value
        #  debug:
         #   var: private_keys
        - name: 5.2.2 Ensure permissions on SSH private host key files are configured | fix permissions
          file:
            path: "{{ item }}"
            state: file
            owner: root
            group: root
            mode: u-x,g-wx,o-rwx
          with_items: "{{ private_keys.stdout_lines }}"
          when: private_keys.stdout_lines | length > 0 

    - name: 5.2.3  Ensure permissions on SSH public host key files are configured
      block:
        - name: 5.2.3 Ensure permissions on SSH public host key files are configured | find keys
          shell: |
            find /etc/ssh -xdev -type f -name 'ssh_host_*_key.pub'
          register: public_keys

       # - name: print registered variable value
       #   debug:
        #    var: public_keys
        - name: 5.2.3 Ensure permissions on SSH public host key files are configured | fix permissions
          file:
            path: "{{ item }}"
            state: file
            owner: root
            group: root
            mode: u-x,go-wx
          with_items: "{{ public_keys.stdout_lines }}"
          when: public_keys.stdout_lines | length > 0 

    #- name: 5.2.4  Ensure SSH access is limited
    
    - name: 5.2.5 Ensure SSH LogLevel is appropriate
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?LogLevel"
        line: "LogLevel INFO"
      notify:
        - Restart SSH

    
    - name: 5.2.6 Ensure SSH PAM is enabled
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?UsePAM"
        line: "UsePAM yes
      notify:
        - Restart SSH
        

    - name: 5.2.7 Ensure SSH root login is disabled
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"
      notify:
        - Restart SSH
        
    - name: 5.2.8 Ensure SSH HostbasedAuthentication is disabled
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?HostbasedAuthentication"
        line: "HostbasedAuthentication no"
      notify:
        - Restart SSH

    - name: 5.2.9 Ensure SSH PermitEmptyPasswords is disabled
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitEmptyPasswords"
        line: "PermitEmptyPasswords no"
      notify:
        - Restart SSH

    - name: 5.2.10 Ensure SSH PermitUserEnvironment is disabled
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitUserEnvironment"
        line: "PermitUserEnvironment no"
      notify:
        - Restart SSH

    - name: 5.2.11 Ensure SSH IgnoreRhosts is enabled
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?IgnoreRhosts'
        line: "IgnoreRhosts yes"
      notify:
        - Restart SSH

    - name: 5.2.12 Ensure SSH X11 forwarding is disabled
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?X11Forwarding"
        line: "X11Forwarding no"
      notify:
        - Restart SSH

    - name: 5.2.13 Ensure SSH AllowTcpForwarding is disabled
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?AllowTcpForwarding"
        line: "AllowTcpForwarding no"
      notify:
        - Restart SSH

    - name: 5.2.14 Ensure system-wide crypto policy is not over-ridden
      shell: 'sed -ri "s/^\s*(CRYPTO_POLICY\s*=.*)$/# \1/" /etc/sysconfig/sshd'; systemctl reload ssh   

    - name: 5.2.15 Ensure SSH warning banner is configured
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?Banner"
        line: "Banner /etc/issue.net"
      notify:
        - Restart SSH

    - name: 5.2.16 Ensure SSH MaxAuthTries is set to 4 or less
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?MaxAuthTries"
        line: "MaxAuthTries 4"
      notify:
        - Restart SSH

    - name: 5.2.17 Ensure SSH MaxStartups is configured 
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?MaxStartups"
        line: "MaxStartups 10:30:60"
      notify:
        - Restart SSH

    - name: 5.2.18 Ensure SSH MaxSessions is set to 10 or less
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?MaxSessions"
        line: "MaxSessions 10"
      notify:
        - Restart SSH

    - name: 5.2.19 Ensure SSH LoginGraceTime is set to one minute or less
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        regexp: "^#?LoginGraceTime"
        line: "LoginGraceTime 60"
      notify:
        - Restart SSH

    - name: 5.2.20 Ensure SSH Idle Timeout Interval is configured
      block:
        - name: 5.2.20 Ensure SSH Idle Timeout Interval is configured | ClientAlive
          lineinfile:
            state: present
            path: /etc/ssh/sshd_config
            regexp: "^#?ClientAliveInterval"
            line: "ClientAliveInterval 900"
          notify:
            - Restart SSH
        - name: 5.2.20 Ensure SSH Idle Timeout Interval is configured | MaxAlive
          lineinfile:
            state: present
            path: /etc/ssh/sshd_config
            regexp: "^#?ClientAliveCountMax"
            line: "ClientAliveCountMax 0"
          notify:
            - Restart SSH

    - name: 5.3.1 Ensure sudo is installed
      dnf:
        name: sudo
        state: present

    - name: 5.3.2 Ensure sudo commands use pty
      block:
        - name: 5.3.2 Ensure sudo commands use pty | "/etc/sudoers"
          lineinfile:
            path: /etc/sudoers
            state: present
            insertafter: '^# Defaults specification$'
            line: "Defaults use_pty"
            validate: "visudo -cf %s"
        - name: 5.3.2 Ensure sudo commands use pty | "/etc/sudoers.d/"
          lineinfile:
            path: "{{ item }}"
            state: present
            insertafter: '^# Defaults specification$'
            line: "Defaults use_pty"
            validate: 'visudo -cf %s'
          with_fileglob:
            - /etc/sudoers.d/*

    - name: 5.3.3 Ensure sudo log file exists
      block:
        - name: 5.3.3 Ensure sudo log file exists | "/etc/sudoers"
          lineinfile:
            path: /etc/sudoers
            state: present
            insertafter: '^# Defaults specification$'
            line: 'Defaults logfile="/var/log/sudo.log"'
            validate: "visudo -cf %s"
        - name: 5.3.3 Ensure sudo log file exists | "/etc/sudoers.d/"
          lineinfile:
            path: "{{ item }}"
            state: present
            insertafter: '^# Defaults specification$'
            line: 'Defaults logfile="/var/log/sudo.log"'
            validate: 'visudo -cf %s'
          with_fileglob:
            - /etc/sudoers.d/*

    - name: 5.3.4 Ensure users must provide password for escalation
      block:
        - name: 5.3.4 Ensure users must provide password for escalation | "/etc/sudoers"
          lineinfile:
            path: /etc/sudoers
            state: absent
            regexp: '^.*NOPASSWD.*$'
            validate: "visudo -cf %s"
        - name: 5.3.4 Ensure users must provide password for escalation | "/etc/sudoers.d/"
          lineinfile:
            path: "{{ item }}"
            state: absent
            regexp: '^.*NOPASSWD.*$'
            validate: "visudo -cf %s"
          with_fileglob:
            - /etc/sudoers.d/*

    - name: 5.3.5 Ensure re-authentication for privilege escalation is not disabled globally
      block:
        - name: 5.3.5 Ensure re-authentication for privilege escalation is not disabled globally | "/etc/sudoers"
          lineinfile:
            path: /etc/sudoers
            state: absent
            regexp: '^.*!authenticate.*$'
            validate: "visudo -cf %s"
        - name: 5.3.5 Ensure re-authentication for privilege escalation is not disabled globally | "/etc/sudoers.d/"
          lineinfile:
            path: "{{ item }}"
            state: absent
            regexp: '^.*!authenticate.*$'
            validate: "visudo -cf %s"
          with_fileglob:
            - /etc/sudoers.d/*

    - name: 5.3.6 Ensure sudo authentication timeout is configured correctly
      block:
        - name: 5.3.6 Ensure sudo authentication timeout is configured correctly | "/etc/sudoers"
          lineinfile:
            path: "/etc/sudoers"
            state: present
            regexp: '^Defaults timestamp_timeout='
            line: "Defaults timestamp_timeout=15"
            validate: "visudo -cf %s"
        - name: 5.3.6 Ensure sudo authentication timeout is configured correctly | "/etc/sudoers.d/"
          lineinfile:
            path: "{{ item }}"
            state: present
            regexp: '^Defaults timestamp_timeout='
            line: "Defaults timestamp_timeout=15"
            validate: "visudo -cf %s"
          with_fileglob:
            - /etc/sudoers.d/*

    - name: 5.3.7 Ensure access to the su command is restricted 
      block:
        - name: 5.3.7 Ensure access to the su command is restricted | adding group
          group:
            name: sugroup
            state: present
        - name: 5.3.7 Ensure access to the su command is restricted | add line to the /etc/pam.d/su
          lineinfile:
            path: /etc/pam.d/su
            create: true
            state: present
            line: 'auth required pam_wheel.so use_uid group=sugroup'

    - name: 5.4.1 Ensure custom authselect profile is used (Manual)
      block:
        - name: 5.4.1 Ensure custom authselect profile is used (Manual) | create custom profile "custom-profile"
          shell: authselect create-profile custom-profile -b sssd --symlink-meta
        - name: 5.4.1 Ensure custom authselect profile is used (Manual) | select custom profile "custom-profile"
          shell: authselect select custom/custom-profile with-sudo with-faillock without-nullok

    - name: 5.4.2 Ensure authselect includes with-faillock (Automated)
      block:
        - name: 5.4.2 Ensure authselect includes with-faillock (Automated) | Enable with-faillock feature
          shell: authselect enable-feature with-faillock
        - name: 5.4.2 Ensure authselect includes with-faillock (Automated) | Apply changes
          shell: authselect apply-changes

    - name: 5.5.1 Ensure password creation requirements are configured (Automated)
      block:
        - name: 5.5.1 Ensure password creation requirements are configured (Automated) | Set pwquality config settings | password minlen
          lineinfile:
            path: /etc/security/pwquality.conf
            regexp: "^#?minlen"
            line: 'minlen = 14'
            state: present
        - name: 5.5.1 Ensure password creation requirements are configured (Automated) | Set pwquality config settings | password complexity
          lineinfile:
            path: /etc/security/pwquality.conf
            regexp: "^#?minclass"
            line: 'minclass = 4'
            state: present 
        - name: 5.5.1 Ensure password creation requirements are configured (Automated) | Update system-auth and password-auth files
          script: script_5_5_1.sh

    - name: 5.5.2 Ensure lockout for failed password attempts is configured (Automated)
      block:
        - name: 5.5.2 Ensure lockout for failed password attempts is configured (Automated) | For OS version RHEL 8.2 or later 
          lineinfile:
            path: /etc/security/faillock.conf
            state: present
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
          loop:
            - { regexp: '^#?deny', line: 'deny = 5' }
            - { regexp: '^#?unlock_time', line: 'unlock_time = 900' }
          when: ansible_distribution_version >= "8.2"
        - name: 5.5.2 Ensure lockout for failed password attempts is configured (Automated) | For OS version RHEL 8.0 and 8.1
          script: script_5_5_2.sh
          when: ansible_distribution_version == "8.0" or ansible_distribution_version == "8.1" 

    - name: 5.5.3 Ensure password reuse is limited (Automated)
      script: script_5_5_3.sh

    - name: 5.5.4 Ensure password hashing algorithm is SHA-512 (Automated)
      block:
        - name: 5.5.4 Ensure password hashing algorithm is SHA-512 (Automated) | Set password hashing algorithm
          lineinfile:
            path: "{{ item.path }}"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            state: present
          loop:
            - { path: /etc/libuser.conf, regexp: '^#?crypt_style', line: 'crypt_style = sha512' }
            - { path: /etc/login.defs, regexp: '^#?ENCRYPT_METHOD', line: 'ENCRYPT_METHOD SHA512' }

        - name: 5.5.4 Ensure password hashing algorithm is SHA-512 (Automated) | Configure pam_unix.so
          script: script_5_5_4.sh

        
        
     


      
        
    - name: 5.6.4- Ensure default group for root account is GID 0
      group:
        name: root
        state: present
        gid: 0

    - name: 5.6.1.1- Ensure password expiration date is 90 days or less
      lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MAX_DAYS'
        line: 'PASS_MAX_DAYS 90'
        state: present

    - name: Get list of all users
      shell: cat /etc/passwd | grep -E '^[^:]*:[^:]*:[0-9]{4}:' | awk -F':' '{print $1}' #returns usernames
      register: users_with_name
      changed_when: false


    - name: Modify user parameters for all users with a password set to match 90
      shell: chage --maxdays 90 {{ item }}
      loop: "{{ users_with_name.stdout_lines }}"


    - name: 5.6.1.2 - Ensure minimum days between password changes is 7 or more
      lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MIN_DAYS'
        line: 'PASS_MIN_DAYS 7'
        state: present

    - name: Modify user parameters for all users with a password set to match 7
      shell: chage --mindays 7 {{ item }}
      loop: "{{ users_with_name.stdout_lines }}"
      changed_when: false

    - name: 5.6.1.3- Ensure password expiration warning days is 7 or more
      lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_WARN_AGE'
        line: 'PASS_WARN_AGE 7'
        state: present

    - name:  Modify user parameters for all users with a password set to match 7   
      shell: chage --warndays 7 {{ item }}
      loop: "{{ users_with_name.stdout_lines }}"
      changed_when: false

   - name: 5.6.1.4- Ensure inactive password lock is 30 days or less
      block:
        - name: Ensure inactive password lock is 30 days or less
          shell: useradd -D -f 30

        - name: Modify user parameters for all users with a password set to match- chage --inactive 30
          shell: chage --inactive 30 {{ item }}
          loop: "{{ users_with_name.stdout_lines }}"

    - name: 5.6.1.5- Ensure all users last password change date is in the past
      block:
        - name: 5.6.1.5- Investigate any users with a password change date in future | get list
          shell: cat /etc/passwd | grep -E '^[^:]*:[^:]*:[0-9]{4}:' | awk -F':' '{print $1}'| while read -r user; do if [[ $(date --date="$(chage --list "$user" | grep '^Last password change' | cut -d ':' -f2)" +%s) > $(date +%s) ]]; then echo "$user"; fi; done
 
          register: output

        - name: 5.6.1.5- Investigate any users with a password change date in future | save list
          copy:
            dest: file_5_6_1_5
            content: "{{ output.stdout_lines }}"



  
      
