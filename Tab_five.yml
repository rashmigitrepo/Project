---
- name: Tab Five
  hosts: your_target_hosts
  gather_facts: yes
  become: yes

  tasks:

    - name: 5.1.1 Ensure cron daemon is enabled and running
      service:
        name: cron
        enabled: yes
        state: started

    - name: 5.1.2 Ensure permissions on /etc/crontab are configured
      file:
        dest: /etc/crontab
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.3 Ensure permissions on /etc/cron.hourly are configured
      file:
        dest: /etc/cron.hourly
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.4 Ensure permissions on /etc/cron.daily are configured
      file:
        dest: /etc/cron.daily
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.5 Ensure permissions on /etc/cron.weekly are configured
      file:
        dest: /etc/cron.weekly
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.6 Ensure permissions on /etc/cron.monthly are configured
      file:
        dest: /etc/cron.monthly
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.7 Ensure permissions on /etc/cron.d are configured
      file:
        dest: /etc/cron.d
        state: directory
        #recurse: yes
        owner: root
        group: root
        mode: og-rwx

    - name: 5.1.8 Ensure cron is restricted to authorized users | Gather package facts for "cronie"
      package_facts:
        manager: auto
      block:
        - name: 5.1.8 Ensure cron is restricted to authorized users | When cronie is installed | remove /etc/cron.deny
          file:
            path: /etc/cron.deny
            state: absent
          ignore_errors: yes
        - name: 5.1.8 Ensure cron is restricted to authorized users | When cronie is installed | stats of /etc/cron.allow 
          stat:
            path: /etc/cron.allow
          register: cfile
        - name: 5.1.8 Ensure cron is restricted to authorized users | create , change ownership and mode of /etc/cron.allow
          file:
            path: /etc/cron.allow
            state: "{{ 'file' if cfile.stat.exists else 'touch' }}"
            owner: root
            group: root
            mode: "u-x,go-rwx"
      when: "'cronie' in ansible_facts['packages']"
    - name: 5.1.8 Ensure cron is restricted to authorized users | Display message when "cronie" is not installed
      debug:
        msg: "cron is not installed on the system"
      when: "'cronie' not in ansible_facts['packages']"
      
    - name: 5.1.9 Ensure at is restricted to authorized users | Gather package facts for "at"
      package_facts:
        manager: auto
      block:
        - name: 5.1.9 Ensure at is restricted to authorized users | When at is installed | remove /etc/at.deny
          file:
            path: /etc/at.deny
            state: absent
          ignore_errors: yes
        - name: 5.1.9 Ensure at is restricted to authorized users | When at is installed | stats of /etc/at.allow 
          stat:
            path: /etc/at.allow
          register: afile
        - name: 5.1.9 Ensure at is restricted to authorized users | create , change ownership and mode of /etc/at.allow
          file:
            path: /etc/at.allow
            state: "{{ 'file' if afile.stat.exists else 'touch' }}"
            owner: root
            group: root
            mode: "u-x,go-rwx"
      when: "'at' in ansible_facts['packages']"
    - name: 5.1.9 Ensure at is restricted to authorized users | Display message when "at" is not installed
      debug:
        msg: "at is not installed on the system"
      when: "'at' not in ansible_facts['packages']"   
        
    - name: 5.6.4- Ensure default group for root account is GID 0
      group:
        name: root
        state: present
        gid: 0

    - name: 5.6.1.1- Ensure password expiration date is 90 days or less
      lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MAX_DAYS'
        line: 'PASS_MAX_DAYS 90'
        state: present

    - name: Get list of all users
      shell: cat /etc/passwd | grep -E '^[^:]*:[^:]*:[0-9]{4}:' | awk -F':' '{print $1}' #returns usernames
      register: users_with_name
      changed_when: false


    - name: Modify user parameters for all users with a password set to match 90
      shell: chage --maxdays 90 {{ item }}
      loop: "{{ users_with_name.stdout_lines }}"


    - name: 5.6.1.2 - Ensure minimum days between password changes is 7 or more
      lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_MIN_DAYS'
        line: 'PASS_MIN_DAYS 7'
        state: present

    - name: Modify user parameters for all users with a password set to match 7
      shell: chage --mindays 7 {{ item }}
      loop: "{{ users_with_name.stdout_lines }}"
      changed_when: false

    - name: 5.6.1.3- Ensure password expiration warning days is 7 or more
      lineinfile:
        path: /etc/login.defs
        regexp: '^PASS_WARN_AGE'
        line: 'PASS_WARN_AGE 7'
        state: present

    - name:  Modify user parameters for all users with a password set to match 7   
      shell: chage --warndays 7 {{ item }}
      loop: "{{ users_with_name.stdout_lines }}"
      changed_when: false

   - name: 5.6.1.4- Ensure inactive password lock is 30 days or less
      block:
        - name: Ensure inactive password lock is 30 days or less
          shell: useradd -D -f 30

        - name: Modify user parameters for all users with a password set to match- chage --inactive 30
          shell: chage --inactive 30 {{ item }}
          loop: "{{ users_with_name.stdout_lines }}"

    - name: 5.6.1.5- Ensure all users last password change date is in the past
      block:
        - name: 5.6.1.5- Investigate any users with a password change date in future | get list
          shell: cat /etc/passwd | grep -E '^[^:]*:[^:]*:[0-9]{4}:' | awk -F':' '{print $1}'| while read -r user; do if [[ $(date --date="$(chage --list "$user" | grep '^Last password change' | cut -d ':' -f2)" +%s) > $(date +%s) ]]; then echo "$user"; fi; done
 
          register: output

        - name: 5.6.1.5- Investigate any users with a password change date in future | save list
          copy:
            dest: file_5_6_1_5
            content: "{{ output.stdout_lines }}"



  
      
